// Fill out your copyright notice in the Description page of Project Settings.


#include "PickupGenerator.h"

#include "PickupWeapon.h"
#include "Components/BillboardComponent.h"
#include "Components/CapsuleComponent.h"
#include "Kismet/KismetSystemLibrary.h"

// Sets default values
APickupGenerator::APickupGenerator()
{
	PrimaryActorTick.bCanEverTick = true;

	// Pickup will not be generated by the client.
	bNetLoadOnClient = false;
	bLoop = true;
	GenerateCooldown = 10.0f;

	GetCapsuleComponent()->InitCapsuleSize(40.0f, 60.0f);
	GetCapsuleComponent()->SetShouldUpdatePhysicsVolume(false);

#if WITH_EDITORONLY_DATA
	if (!IsRunningCommandlet())
	{
		// Structure to hold one-time initialization
		struct FConstructorStatics
		{
			ConstructorHelpers::FObjectFinderOptional<UTexture2D> PlayerStartTextureObject;
			FName ID_PickupGenerator;
			FText PickupGenerator;
			FName ID_Navigation;
			FText NAME_Navigation;

			FConstructorStatics()
				: PlayerStartTextureObject(TEXT("/Engine/EditorResources/Spawn_Point"))
				  , ID_PickupGenerator(TEXT("PickupGenerator"))
				  , PickupGenerator(NSLOCTEXT("SpriteCategory", "PickupGenerator", "Pickup Generator"))
				  , ID_Navigation(TEXT("Navigation"))
				  , NAME_Navigation(NSLOCTEXT("SpriteCategory", "Navigation", "Navigation"))
			{
			}
		};
		static FConstructorStatics ConstructorStatics;

		if (GetGoodSprite())
		{
			GetGoodSprite()->Sprite = ConstructorStatics.PlayerStartTextureObject.Get();
			GetGoodSprite()->SetRelativeScale3D(FVector(0.5f, 0.5f, 0.5f));
			GetGoodSprite()->SpriteInfo.Category = ConstructorStatics.ID_PickupGenerator;
			GetGoodSprite()->SpriteInfo.DisplayName = ConstructorStatics.PickupGenerator;
		}
		if (GetBadSprite())
		{
			GetBadSprite()->SetVisibility(false);
		}
	}
#endif // WITH_EDITORONLY_DATA
}

void APickupGenerator::BeginPlay()
{
	Super::BeginPlay();

	GeneratePickup();
}

void APickupGenerator::EndPlay(const EEndPlayReason::Type EndPlayReason)
{
	GetWorld()->GetTimerManager().ClearTimer(NextPickupGenerateTimerHandle);

	Super::EndPlay(EndPlayReason);
}

void APickupGenerator::GeneratePickup()
{
	check(GetWorld()->GetFirstPlayerController()->HasAuthority());


	APickup* NewPickup = GetWorld()->SpawnActor<APickup>(PickupList[FMath::RandRange(0, PickupList.Num() - 1)], GetTransform());
	bHasPickup = true;

	if (bLoop)
	{
		NewPickup->OnPickUpOrTimeOut.BindUObject(this, &APickupGenerator::OnPickUpOrTimeOutEvent);
	}
	else
	{
		SetLifeSpan(0.1f);
	}
}

void APickupGenerator::OnPickUpOrTimeOutEvent()
{
	GetWorld()->GetTimerManager().SetTimer(NextPickupGenerateTimerHandle, this, &APickupGenerator::GeneratePickup, GenerateCooldown);
	bHasPickup = false;
}
